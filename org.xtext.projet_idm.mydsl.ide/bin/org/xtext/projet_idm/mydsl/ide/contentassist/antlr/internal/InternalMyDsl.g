/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.projet_idm.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.projet_idm.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.projet_idm.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMachineLearingGenerator
entryRuleMachineLearingGenerator
:
{ before(grammarAccess.getMachineLearingGeneratorRule()); }
	 ruleMachineLearingGenerator
{ after(grammarAccess.getMachineLearingGeneratorRule()); } 
	 EOF 
;

// Rule MachineLearingGenerator
ruleMachineLearingGenerator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMachineLearingGeneratorAccess().getOperationsAssignment()); }
		(rule__MachineLearingGenerator__OperationsAssignment)*
		{ after(grammarAccess.getMachineLearingGeneratorAccess().getOperationsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getGroup()); }
		(rule__Operation__Group__0)
		{ after(grammarAccess.getOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCSVFile
entryRuleCSVFile
:
{ before(grammarAccess.getCSVFileRule()); }
	 ruleCSVFile
{ after(grammarAccess.getCSVFileRule()); } 
	 EOF 
;

// Rule CSVFile
ruleCSVFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCSVFileAccess().getGroup()); }
		(rule__CSVFile__Group__0)
		{ after(grammarAccess.getCSVFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSplitSet
entryRuleSplitSet
:
{ before(grammarAccess.getSplitSetRule()); }
	 ruleSplitSet
{ after(grammarAccess.getSplitSetRule()); } 
	 EOF 
;

// Rule SplitSet
ruleSplitSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSplitSetAccess().getGroup()); }
		(rule__SplitSet__Group__0)
		{ after(grammarAccess.getSplitSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredict
entryRulePredict
:
{ before(grammarAccess.getPredictRule()); }
	 rulePredict
{ after(grammarAccess.getPredictRule()); } 
	 EOF 
;

// Rule Predict
rulePredict 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredictAccess().getGroup()); }
		(rule__Predict__Group__0)
		{ after(grammarAccess.getPredictAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShow
entryRuleShow
:
{ before(grammarAccess.getShowRule()); }
	 ruleShow
{ after(grammarAccess.getShowRule()); } 
	 EOF 
;

// Rule Show
ruleShow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShowAccess().getShowKeyword()); }
		'show'
		{ after(grammarAccess.getShowAccess().getShowKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ALGO
ruleALGO
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getALGOAccess().getAlternatives()); }
		(rule__ALGO__Alternatives)
		{ after(grammarAccess.getALGOAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule STRAT
ruleSTRAT
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRATAccess().getAlternatives()); }
		(rule__STRAT__Alternatives)
		{ after(grammarAccess.getSTRATAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ALGO__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getALGOAccess().getJ48EnumLiteralDeclaration_0()); }
		('J48')
		{ after(grammarAccess.getALGOAccess().getJ48EnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getALGOAccess().getNaiveBayesEnumLiteralDeclaration_1()); }
		('NaiveBayes')
		{ after(grammarAccess.getALGOAccess().getNaiveBayesEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getALGOAccess().getClassificationTreeEnumLiteralDeclaration_2()); }
		('ClassificationTree')
		{ after(grammarAccess.getALGOAccess().getClassificationTreeEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getALGOAccess().getSVMEnumLiteralDeclaration_3()); }
		('SVM')
		{ after(grammarAccess.getALGOAccess().getSVMEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STRAT__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTRATAccess().getTrain_testEnumLiteralDeclaration_0()); }
		('train_test')
		{ after(grammarAccess.getSTRATAccess().getTrain_testEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSTRATAccess().getCross_validationEnumLiteralDeclaration_1()); }
		('cross_validation')
		{ after(grammarAccess.getSTRATAccess().getCross_validationEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getCSVFileParserRuleCall_0()); }
	ruleCSVFile
	{ after(grammarAccess.getOperationAccess().getCSVFileParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getL2Assignment_1()); }
	(rule__Operation__L2Assignment_1)
	{ after(grammarAccess.getOperationAccess().getL2Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__2__Impl
	rule__Operation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getL3Assignment_2()); }
	(rule__Operation__L3Assignment_2)
	{ after(grammarAccess.getOperationAccess().getL3Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getL4Assignment_3()); }
	(rule__Operation__L4Assignment_3)?
	{ after(grammarAccess.getOperationAccess().getL4Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CSVFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSVFile__Group__0__Impl
	rule__CSVFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSVFileAccess().getReadCSVKeyword_0()); }
	'readCSV'
	{ after(grammarAccess.getCSVFileAccess().getReadCSVKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSVFile__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSVFileAccess().getFileAssignment_1()); }
	(rule__CSVFile__FileAssignment_1)
	{ after(grammarAccess.getCSVFileAccess().getFileAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SplitSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitSet__Group__0__Impl
	rule__SplitSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitSetAccess().getSplitKeyword_0()); }
	'split'
	{ after(grammarAccess.getSplitSetAccess().getSplitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitSet__Group__1__Impl
	rule__SplitSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitSetAccess().getVarAssignment_1()); }
	(rule__SplitSet__VarAssignment_1)
	{ after(grammarAccess.getSplitSetAccess().getVarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitSet__Group__2__Impl
	rule__SplitSet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitSetAccess().getSizeAssignment_2()); }
	(rule__SplitSet__SizeAssignment_2)
	{ after(grammarAccess.getSplitSetAccess().getSizeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SplitSet__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSplitSetAccess().getStratAssignment_3()); }
	(rule__SplitSet__StratAssignment_3)
	{ after(grammarAccess.getSplitSetAccess().getStratAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predict__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predict__Group__0__Impl
	rule__Predict__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predict__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictAccess().getPredictKeyword_0()); }
	'predict'
	{ after(grammarAccess.getPredictAccess().getPredictKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predict__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predict__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predict__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictAccess().getAlgoAssignment_1()); }
	(rule__Predict__AlgoAssignment_1)
	{ after(grammarAccess.getPredictAccess().getAlgoAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MachineLearingGenerator__OperationsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineLearingGeneratorAccess().getOperationsOperationParserRuleCall_0()); }
		ruleOperation
		{ after(grammarAccess.getMachineLearingGeneratorAccess().getOperationsOperationParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__L2Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getL2SplitSetParserRuleCall_1_0()); }
		ruleSplitSet
		{ after(grammarAccess.getOperationAccess().getL2SplitSetParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__L3Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getL3PredictParserRuleCall_2_0()); }
		rulePredict
		{ after(grammarAccess.getOperationAccess().getL3PredictParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__L4Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getL4ShowParserRuleCall_3_0()); }
		ruleShow
		{ after(grammarAccess.getOperationAccess().getL4ShowParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVFile__FileAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSVFileAccess().getFileSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCSVFileAccess().getFileSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSplitSetAccess().getVarSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSplitSetAccess().getVarSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__SizeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSplitSetAccess().getSizeDOUBLETerminalRuleCall_2_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getSplitSetAccess().getSizeDOUBLETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SplitSet__StratAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSplitSetAccess().getStratSTRATEnumRuleCall_3_0()); }
		ruleSTRAT
		{ after(grammarAccess.getSplitSetAccess().getStratSTRATEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predict__AlgoAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredictAccess().getAlgoALGOEnumRuleCall_1_0()); }
		ruleALGO
		{ after(grammarAccess.getPredictAccess().getAlgoALGOEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
