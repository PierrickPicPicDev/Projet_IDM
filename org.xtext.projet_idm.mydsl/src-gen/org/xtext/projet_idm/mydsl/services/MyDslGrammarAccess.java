/*
 * generated by Xtext 2.19.0
 */
package org.xtext.projet_idm.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MachineLearingGeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.MachineLearingGenerator");
		private final Assignment cOperationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_0 = (RuleCall)cOperationsAssignment.eContents().get(0);
		
		//MachineLearingGenerator:
		//	operations+=Operation*;
		@Override public ParserRule getRule() { return rule; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment() { return cOperationsAssignment; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_0() { return cOperationsOperationParserRuleCall_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCSVFileParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cL2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cL2SplitSetParserRuleCall_1_0 = (RuleCall)cL2Assignment_1.eContents().get(0);
		private final Assignment cL3Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cL3PredictParserRuleCall_2_0 = (RuleCall)cL3Assignment_2.eContents().get(0);
		private final Assignment cL4Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cL4ShowParserRuleCall_3_0 = (RuleCall)cL4Assignment_3.eContents().get(0);
		
		//Operation:
		//	CSVFile
		//	l2+=SplitSet
		//	l3+=Predict
		//	l4+=Show?;
		@Override public ParserRule getRule() { return rule; }
		
		//CSVFile l2+=SplitSet l3+=Predict l4+=Show?
		public Group getGroup() { return cGroup; }
		
		//CSVFile
		public RuleCall getCSVFileParserRuleCall_0() { return cCSVFileParserRuleCall_0; }
		
		//l2+=SplitSet
		public Assignment getL2Assignment_1() { return cL2Assignment_1; }
		
		//SplitSet
		public RuleCall getL2SplitSetParserRuleCall_1_0() { return cL2SplitSetParserRuleCall_1_0; }
		
		//l3+=Predict
		public Assignment getL3Assignment_2() { return cL3Assignment_2; }
		
		//Predict
		public RuleCall getL3PredictParserRuleCall_2_0() { return cL3PredictParserRuleCall_2_0; }
		
		//l4+=Show?
		public Assignment getL4Assignment_3() { return cL4Assignment_3; }
		
		//Show
		public RuleCall getL4ShowParserRuleCall_3_0() { return cL4ShowParserRuleCall_3_0; }
	}
	public class CSVFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.CSVFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadCSVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileAssignment_1.eContents().get(0);
		
		//CSVFile:
		//	'readCSV' file=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'readCSV' file=STRING
		public Group getGroup() { return cGroup; }
		
		//'readCSV'
		public Keyword getReadCSVKeyword_0() { return cReadCSVKeyword_0; }
		
		//file=STRING
		public Assignment getFileAssignment_1() { return cFileAssignment_1; }
		
		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_1_0() { return cFileSTRINGTerminalRuleCall_1_0; }
	}
	public class SplitSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.SplitSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSplitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarSTRINGTerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeDOUBLETerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Assignment cStratAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStratSTRATEnumRuleCall_3_0 = (RuleCall)cStratAssignment_3.eContents().get(0);
		
		//SplitSet:
		//	'split' var=STRING size=DOUBLE strat=STRAT;
		@Override public ParserRule getRule() { return rule; }
		
		//'split' var=STRING size=DOUBLE strat=STRAT
		public Group getGroup() { return cGroup; }
		
		//'split'
		public Keyword getSplitKeyword_0() { return cSplitKeyword_0; }
		
		//var=STRING
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//STRING
		public RuleCall getVarSTRINGTerminalRuleCall_1_0() { return cVarSTRINGTerminalRuleCall_1_0; }
		
		//size=DOUBLE
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//DOUBLE
		public RuleCall getSizeDOUBLETerminalRuleCall_2_0() { return cSizeDOUBLETerminalRuleCall_2_0; }
		
		//strat=STRAT
		public Assignment getStratAssignment_3() { return cStratAssignment_3; }
		
		//STRAT
		public RuleCall getStratSTRATEnumRuleCall_3_0() { return cStratSTRATEnumRuleCall_3_0; }
	}
	public class PredictElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.Predict");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAlgoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAlgoALGOEnumRuleCall_1_0 = (RuleCall)cAlgoAssignment_1.eContents().get(0);
		
		//Predict:
		//	'predict' algo=ALGO;
		@Override public ParserRule getRule() { return rule; }
		
		//'predict' algo=ALGO
		public Group getGroup() { return cGroup; }
		
		//'predict'
		public Keyword getPredictKeyword_0() { return cPredictKeyword_0; }
		
		//algo=ALGO
		public Assignment getAlgoAssignment_1() { return cAlgoAssignment_1; }
		
		//ALGO
		public RuleCall getAlgoALGOEnumRuleCall_1_0() { return cAlgoALGOEnumRuleCall_1_0; }
	}
	public class ShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.Show");
		private final Keyword cShowKeyword = (Keyword)rule.eContents().get(1);
		
		//Show:
		//	'show';
		@Override public ParserRule getRule() { return rule; }
		
		//'show'
		public Keyword getShowKeyword() { return cShowKeyword; }
	}
	
	public class ALGOElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.ALGO");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJ48EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJ48J48Keyword_0_0 = (Keyword)cJ48EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNaiveBayesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNaiveBayesNaiveBayesKeyword_1_0 = (Keyword)cNaiveBayesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cClassificationTreeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cClassificationTreeClassificationTreeKeyword_2_0 = (Keyword)cClassificationTreeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSVMEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSVMSVMKeyword_3_0 = (Keyword)cSVMEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ALGO:
		//	J48 | NaiveBayes | ClassificationTree | SVM;
		public EnumRule getRule() { return rule; }
		
		//J48 | NaiveBayes | ClassificationTree | SVM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//J48
		public EnumLiteralDeclaration getJ48EnumLiteralDeclaration_0() { return cJ48EnumLiteralDeclaration_0; }
		
		//"J48"
		public Keyword getJ48J48Keyword_0_0() { return cJ48J48Keyword_0_0; }
		
		//NaiveBayes
		public EnumLiteralDeclaration getNaiveBayesEnumLiteralDeclaration_1() { return cNaiveBayesEnumLiteralDeclaration_1; }
		
		//"NaiveBayes"
		public Keyword getNaiveBayesNaiveBayesKeyword_1_0() { return cNaiveBayesNaiveBayesKeyword_1_0; }
		
		//ClassificationTree
		public EnumLiteralDeclaration getClassificationTreeEnumLiteralDeclaration_2() { return cClassificationTreeEnumLiteralDeclaration_2; }
		
		//"ClassificationTree"
		public Keyword getClassificationTreeClassificationTreeKeyword_2_0() { return cClassificationTreeClassificationTreeKeyword_2_0; }
		
		//SVM
		public EnumLiteralDeclaration getSVMEnumLiteralDeclaration_3() { return cSVMEnumLiteralDeclaration_3; }
		
		//"SVM"
		public Keyword getSVMSVMKeyword_3_0() { return cSVMSVMKeyword_3_0; }
	}
	public class STRATElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.STRAT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrain_testEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrain_testTrain_testKeyword_0_0 = (Keyword)cTrain_testEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCross_validationEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCross_validationCross_validationKeyword_1_0 = (Keyword)cCross_validationEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum STRAT:
		//	train_test | cross_validation;
		public EnumRule getRule() { return rule; }
		
		//train_test | cross_validation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//train_test
		public EnumLiteralDeclaration getTrain_testEnumLiteralDeclaration_0() { return cTrain_testEnumLiteralDeclaration_0; }
		
		//"train_test"
		public Keyword getTrain_testTrain_testKeyword_0_0() { return cTrain_testTrain_testKeyword_0_0; }
		
		//cross_validation
		public EnumLiteralDeclaration getCross_validationEnumLiteralDeclaration_1() { return cCross_validationEnumLiteralDeclaration_1; }
		
		//"cross_validation"
		public Keyword getCross_validationCross_validationKeyword_1_0() { return cCross_validationCross_validationKeyword_1_0; }
	}
	
	private final MachineLearingGeneratorElements pMachineLearingGenerator;
	private final OperationElements pOperation;
	private final CSVFileElements pCSVFile;
	private final SplitSetElements pSplitSet;
	private final PredictElements pPredict;
	private final ShowElements pShow;
	private final ALGOElements eALGO;
	private final STRATElements eSTRAT;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMachineLearingGenerator = new MachineLearingGeneratorElements();
		this.pOperation = new OperationElements();
		this.pCSVFile = new CSVFileElements();
		this.pSplitSet = new SplitSetElements();
		this.pPredict = new PredictElements();
		this.pShow = new ShowElements();
		this.eALGO = new ALGOElements();
		this.eSTRAT = new STRATElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.projet_idm.mydsl.MyDsl.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.projet_idm.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MachineLearingGenerator:
	//	operations+=Operation*;
	public MachineLearingGeneratorElements getMachineLearingGeneratorAccess() {
		return pMachineLearingGenerator;
	}
	
	public ParserRule getMachineLearingGeneratorRule() {
		return getMachineLearingGeneratorAccess().getRule();
	}
	
	//Operation:
	//	CSVFile
	//	l2+=SplitSet
	//	l3+=Predict
	//	l4+=Show?;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//CSVFile:
	//	'readCSV' file=STRING;
	public CSVFileElements getCSVFileAccess() {
		return pCSVFile;
	}
	
	public ParserRule getCSVFileRule() {
		return getCSVFileAccess().getRule();
	}
	
	//SplitSet:
	//	'split' var=STRING size=DOUBLE strat=STRAT;
	public SplitSetElements getSplitSetAccess() {
		return pSplitSet;
	}
	
	public ParserRule getSplitSetRule() {
		return getSplitSetAccess().getRule();
	}
	
	//Predict:
	//	'predict' algo=ALGO;
	public PredictElements getPredictAccess() {
		return pPredict;
	}
	
	public ParserRule getPredictRule() {
		return getPredictAccess().getRule();
	}
	
	//Show:
	//	'show';
	public ShowElements getShowAccess() {
		return pShow;
	}
	
	public ParserRule getShowRule() {
		return getShowAccess().getRule();
	}
	
	//enum ALGO:
	//	J48 | NaiveBayes | ClassificationTree | SVM;
	public ALGOElements getALGOAccess() {
		return eALGO;
	}
	
	public EnumRule getALGORule() {
		return getALGOAccess().getRule();
	}
	
	//enum STRAT:
	//	train_test | cross_validation;
	public STRATElements getSTRATAccess() {
		return eSTRAT;
	}
	
	public EnumRule getSTRATRule() {
		return getSTRATAccess().getRule();
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
