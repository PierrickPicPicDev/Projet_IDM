/*
 * generated by Xtext 2.19.0
 */
package org.xtext.projet_idm.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.projet_idm.mydsl.myDsl.CSVFile;
import org.xtext.projet_idm.mydsl.myDsl.MachineLearingGenerator;
import org.xtext.projet_idm.mydsl.myDsl.MyDslPackage;
import org.xtext.projet_idm.mydsl.myDsl.Predict;
import org.xtext.projet_idm.mydsl.myDsl.SplitSet;
import org.xtext.projet_idm.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CSV_FILE:
				if (rule == grammarAccess.getCSVFileRule()) {
					sequence_CSVFile(context, (CSVFile) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOperationRule()) {
					sequence_CSVFile_Operation(context, (CSVFile) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.MACHINE_LEARING_GENERATOR:
				sequence_MachineLearingGenerator(context, (MachineLearingGenerator) semanticObject); 
				return; 
			case MyDslPackage.PREDICT:
				sequence_Predict(context, (Predict) semanticObject); 
				return; 
			case MyDslPackage.SPLIT_SET:
				sequence_SplitSet(context, (SplitSet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CSVFile returns CSVFile
	 *
	 * Constraint:
	 *     file=STRING
	 */
	protected void sequence_CSVFile(ISerializationContext context, CSVFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CSV_FILE__FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CSV_FILE__FILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCSVFileAccess().getFileSTRINGTerminalRuleCall_1_0(), semanticObject.getFile());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns CSVFile
	 *
	 * Constraint:
	 *     (file=STRING l2+=SplitSet l3+=Predict l4+=Show?)
	 */
	protected void sequence_CSVFile_Operation(ISerializationContext context, CSVFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MachineLearingGenerator returns MachineLearingGenerator
	 *
	 * Constraint:
	 *     operations+=Operation+
	 */
	protected void sequence_MachineLearingGenerator(ISerializationContext context, MachineLearingGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predict returns Predict
	 *
	 * Constraint:
	 *     algo=ALGO
	 */
	protected void sequence_Predict(ISerializationContext context, Predict semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PREDICT__ALGO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PREDICT__ALGO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredictAccess().getAlgoALGOEnumRuleCall_1_0(), semanticObject.getAlgo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SplitSet returns SplitSet
	 *
	 * Constraint:
	 *     (var=STRING size=DOUBLE strat=STRAT)
	 */
	protected void sequence_SplitSet(ISerializationContext context, SplitSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SPLIT_SET__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SPLIT_SET__VAR));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SPLIT_SET__SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SPLIT_SET__SIZE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SPLIT_SET__STRAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SPLIT_SET__STRAT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSplitSetAccess().getVarSTRINGTerminalRuleCall_1_0(), semanticObject.getVar());
		feeder.accept(grammarAccess.getSplitSetAccess().getSizeDOUBLETerminalRuleCall_2_0(), semanticObject.getSize());
		feeder.accept(grammarAccess.getSplitSetAccess().getStratSTRATEnumRuleCall_3_0(), semanticObject.getStrat());
		feeder.finish();
	}
	
	
}
