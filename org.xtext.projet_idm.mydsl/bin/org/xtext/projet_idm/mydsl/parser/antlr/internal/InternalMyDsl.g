/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.projet_idm.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.projet_idm.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.projet_idm.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MachineLearingGenerator";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMachineLearingGenerator
entryRuleMachineLearingGenerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMachineLearingGeneratorRule()); }
	iv_ruleMachineLearingGenerator=ruleMachineLearingGenerator
	{ $current=$iv_ruleMachineLearingGenerator.current; }
	EOF;

// Rule MachineLearingGenerator
ruleMachineLearingGenerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getMachineLearingGeneratorAccess().getOperationsOperationParserRuleCall_0());
			}
			lv_operations_0_0=ruleOperation
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getMachineLearingGeneratorRule());
				}
				add(
					$current,
					"operations",
					lv_operations_0_0,
					"org.xtext.projet_idm.mydsl.MyDsl.Operation");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getCSVFileParserRuleCall_0());
		}
		this_CSVFile_0=ruleCSVFile
		{
			$current = $this_CSVFile_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getL2SplitSetParserRuleCall_1_0());
				}
				lv_l2_1_0=ruleSplitSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					add(
						$current,
						"l2",
						lv_l2_1_0,
						"org.xtext.projet_idm.mydsl.MyDsl.SplitSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getL3PredictParserRuleCall_2_0());
				}
				lv_l3_2_0=rulePredict
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					add(
						$current,
						"l3",
						lv_l3_2_0,
						"org.xtext.projet_idm.mydsl.MyDsl.Predict");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getL4ShowParserRuleCall_3_0());
				}
				lv_l4_3_0=ruleShow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					add(
						$current,
						"l4",
						lv_l4_3_0,
						"org.xtext.projet_idm.mydsl.MyDsl.Show");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCSVFile
entryRuleCSVFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSVFileRule()); }
	iv_ruleCSVFile=ruleCSVFile
	{ $current=$iv_ruleCSVFile.current; }
	EOF;

// Rule CSVFile
ruleCSVFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='readCSV'
		{
			newLeafNode(otherlv_0, grammarAccess.getCSVFileAccess().getReadCSVKeyword_0());
		}
		(
			(
				lv_file_1_0=RULE_STRING
				{
					newLeafNode(lv_file_1_0, grammarAccess.getCSVFileAccess().getFileSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCSVFileRule());
					}
					setWithLastConsumed(
						$current,
						"file",
						lv_file_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSplitSet
entryRuleSplitSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSplitSetRule()); }
	iv_ruleSplitSet=ruleSplitSet
	{ $current=$iv_ruleSplitSet.current; }
	EOF;

// Rule SplitSet
ruleSplitSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='split'
		{
			newLeafNode(otherlv_0, grammarAccess.getSplitSetAccess().getSplitKeyword_0());
		}
		(
			(
				lv_var_1_0=RULE_STRING
				{
					newLeafNode(lv_var_1_0, grammarAccess.getSplitSetAccess().getVarSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSplitSetRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_size_2_0=RULE_DOUBLE
				{
					newLeafNode(lv_size_2_0, grammarAccess.getSplitSetAccess().getSizeDOUBLETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSplitSetRule());
					}
					setWithLastConsumed(
						$current,
						"size",
						lv_size_2_0,
						"org.xtext.projet_idm.mydsl.MyDsl.DOUBLE");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSplitSetAccess().getStratSTRATEnumRuleCall_3_0());
				}
				lv_strat_3_0=ruleSTRAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSplitSetRule());
					}
					set(
						$current,
						"strat",
						lv_strat_3_0,
						"org.xtext.projet_idm.mydsl.MyDsl.STRAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredict
entryRulePredict returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredictRule()); }
	iv_rulePredict=rulePredict
	{ $current=$iv_rulePredict.current; }
	EOF;

// Rule Predict
rulePredict returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='predict'
		{
			newLeafNode(otherlv_0, grammarAccess.getPredictAccess().getPredictKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredictAccess().getAlgoALGOEnumRuleCall_1_0());
				}
				lv_algo_1_0=ruleALGO
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredictRule());
					}
					set(
						$current,
						"algo",
						lv_algo_1_0,
						"org.xtext.projet_idm.mydsl.MyDsl.ALGO");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleShow
entryRuleShow returns [String current=null]:
	{ newCompositeNode(grammarAccess.getShowRule()); }
	iv_ruleShow=ruleShow
	{ $current=$iv_ruleShow.current.getText(); }
	EOF;

// Rule Show
ruleShow returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='show'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getShowAccess().getShowKeyword());
	}
;

// Rule ALGO
ruleALGO returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='J48'
			{
				$current = grammarAccess.getALGOAccess().getJ48EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getALGOAccess().getJ48EnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='NaiveBayes'
			{
				$current = grammarAccess.getALGOAccess().getNaiveBayesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getALGOAccess().getNaiveBayesEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='ClassificationTree'
			{
				$current = grammarAccess.getALGOAccess().getClassificationTreeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getALGOAccess().getClassificationTreeEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='SVM'
			{
				$current = grammarAccess.getALGOAccess().getSVMEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getALGOAccess().getSVMEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule STRAT
ruleSTRAT returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='train_test'
			{
				$current = grammarAccess.getSTRATAccess().getTrain_testEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSTRATAccess().getTrain_testEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='cross_validation'
			{
				$current = grammarAccess.getSTRATAccess().getCross_validationEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSTRATAccess().getCross_validationEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
